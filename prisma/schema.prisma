generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemConfig {
  id                    String   @id
  terms                 String
  termsUpdateAt         DateTime @default(now())
  subscriptionAgreement String
  updatedAt             DateTime @updatedAt

  @@map("systemConfig")
}

model Company {
  id                    String       @id @default(uuid())
  accountType           String       @default("NORMAL")
  CNPJ                  String       @unique
  email                 String       @unique
  emailConfirmationCode Int?
  emailChecked          Boolean      @default(false)
  name                  String
  passwordHash          String
  payId                 String?
  payType               String?
  withNfe               Boolean?     @default(false)
  payDate               DateTime?
  termsDate             DateTime?
  companyTerms          String?
  lists                 String[]
  textMessage           String       @default("")
  hasCost               Boolean      @default(false)
  products              Product[]
  orders                Order[]
  clients               Client[]
  employees             Employee[]
  accessToken           AccessToken?
  NfeDataTable          NfeData?
  address               Address?
  suppliers             Supplier[]
  nfces                 Nfce[]
  createdAt             DateTime     @default(now())

  @@map("company")
}

model AccessToken {
  code        String    @id @default(uuid())
  companyId   String?   @unique
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  activatedAt DateTime?
}

model Supplier {
  id        String    @id @default(uuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name      String
  CNPJ      String
  CEP       String
  email     String?
  phone     String?
  products  Product[]

  @@unique([companyId, CNPJ])
  @@unique([companyId, email])
  @@map("supplier")
}

model Employee {
  id        String    @id @default(uuid())
  name      String
  CPF       String
  phone     String?
  role      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime  @default(now())
  Service   Service[]

  @@unique([companyId, CPF])
  @@map("employee")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  CPF       String
  email     String?
  phone     String?
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders    Order[]
  nfces     Nfce[]
  address   Address?
  createdAt DateTime @default(now())

  @@unique([companyId, CPF])
  @@unique([companyId, email])
  @@map("client")
}

model Address {
  id           String   @id @default(uuid())
  country      String
  city         String
  state        String
  neighborhood String
  street       String
  streetNumber String
  zipCode      String
  clientId     String?  @unique
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  companyId    String?  @unique
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("address")
}

model NfeData {
  id                         String  @id @default(uuid())
  serializedCertificatePFX   String
  certificatePasswordEncrypt String
  companyId                  String  @unique
  company                    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  IE                         String
  IM                         String
  idCSC                      String
  CSC                        String
  lastNNF                    String

  @@map("nfe_data")
}

model Nfce {
  chNFe     String   @id @unique
  nProt     String   @unique
  number    String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  orderId   String?  @unique
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  @@unique([companyId, chNFe])
  @@unique([companyId, nProt])
  @@map("nfce")
}

model Product {
  id           String      @id @default(uuid())
  cEAN         String?
  NCM          String?
  companyId    String
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierId   String?
  supplier     Supplier?   @relation(fields: [supplierId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  warrantyDays Int?
  type         String
  cost         Float
  price        Float
  condition    String
  description  String
  localization String?
  orders       OrderItem[]
  quantity     Int
  createdAt    DateTime    @default(now())

  @@unique([companyId, description])
  @@map("product")
}

model Order {
  id                   String      @id @default(uuid())
  companyId            String
  company              Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId             String?
  client               Client?     @relation(fields: [clientId], references: [id], onDelete: SetNull)
  employeeId           String?
  employee             Employee?   @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  IMEI                 String?
  number               Int         @default(autoincrement())
  type                 String
  orderItems           OrderItem[]
  status               String
  paymentStatus        String
  payDate              DateTime?
  closingDate          DateTime?
  paymentMethod        String
  firstDueDate         DateTime?
  dueDate              Int?
  numberOfInstallments Int?
  interest             Float?
  amountPaid           Float?
  price                Float
  description          String?
  createdAt            DateTime    @default(now())
  nfce                 Nfce?

  @@unique([companyId, number])
  @@map("order")
}

model OrderItem {
  id                     String   @id @default(uuid())
  orderId                String
  order                  Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId              String
  product                Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  registeredProductPrice Float
  registeredProductCost  Float
  quantity               Int
  discount               Float?
  initialQuantity        Int
  service                Service?

  @@map("order_item")
}

model Service {
  id          String     @id @default(uuid())
  orderItemId String?    @unique
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId  String?
  employee    Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  status      String?    @default("PENDING")
  report      String?

  @@map("service")
}
