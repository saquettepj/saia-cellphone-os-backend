generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String       @id @default(uuid())
  accountType           String       @default("NORMAL")
  CNPJ                  String       @unique
  email                 String       @unique
  emailConfirmationCode Int?
  emailChecked          Boolean      @default(false)
  name                  String
  passwordHash          String
  payDate               DateTime?
  termsDate             DateTime?
  products              Product[]
  orders                Order[]
  clients               Client[]
  employees             Employee[]
  accessToken           AccessToken?
  NfeDataTable          NfeData?
  addressId             String?
  address               Address?
  Nfes                  Nfe[]
  createdAt             DateTime     @default(now())

  @@map("company")
}

model AccessToken {
  code        String    @id @default(uuid())
  companyId   String?   @unique
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  activatedAt DateTime?
}

model Employee {
  id        String   @id @default(uuid())
  name      String
  CPF       String
  phone     String?
  role      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())

  @@unique([companyId, CPF])
  @@map("employee")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  CPF       String
  email     String
  phone     String?
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders    Order[]
  Nfes      Nfe[]
  addressId String?
  address   Address?
  createdAt DateTime @default(now())

  @@unique([companyId, CPF])
  @@unique([companyId, email])
  @@map("client")
}

model Address {
  id           String   @id @default(uuid())
  country      String
  city         String
  state        String
  neighborhood String
  street       String
  streetNumber String
  zipCode      String
  clientId     String?  @unique
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  companyId    String?  @unique
  company      Company? @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("address")
}

model NfeData {
  id                       String  @id @default(uuid())
  certificateKey           String?
  serializedCertificatePFX String?
  serializedCertificatePEM String?
  certificatePasswordHash  String?
  companyId                String  @unique
  company                  Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  idCSC                    String
  CSC                      String
  inscricaoEstadual        String
  regimeTributario         String // Pode ser Simples Nacional, Lucro Presumido, etc.
  codigoRegimeTributario   String // Código do regime tributário
  cnae                     String // Código Nacional de Atividade Econômica

  @@map("nfe_data_table")
}

model Nfe {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  protocol  String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, protocol])
  @@unique([companyId, key])
  @@map("nfe")
}

model Product {
  id          String      @id @default(uuid())
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type        String
  price       Float
  condition   String
  description String
  orders      OrderItem[]
  quantity    Int

  @@unique([companyId, description])
  @@map("product")
}

model Order {
  id            String      @id @default(uuid())
  companyId     String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client      @relation(fields: [clientId], references: [id])
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id])
  number        Int         @default(autoincrement())
  type          String
  orderItems    OrderItem[]
  status        String
  payDate       DateTime
  paymentMethod String
  price         Float
  description   String?
  createdAt     DateTime    @default(now())

  @@unique([companyId, number])
  @@map("order")
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity        Int
  initialQuantity Int

  @@map("order_item")
}
